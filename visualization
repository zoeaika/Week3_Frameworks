```python
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score
import pandas as pd
import json

# Load and preprocess Iris dataset
iris = load_iris()
X, y = iris.data, iris.target
df = pd.DataFrame(X, columns=iris.feature_names)
df.fillna(df.mean(), inplace=True)
X = df.values

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train decision tree
clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)

# Compute metrics
y_pred = clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='macro')
recall = recall_score(y_test, y_pred, average='macro')

# Data for visualization
metrics = [accuracy, precision, recall]

# Print Chart.js configuration
print("Iris Decision Tree Performance Chart:")
print(f"""
```chartjs
{{
  "type": "bar",
  "data": {{
    "labels": ["Accuracy", "Precision", "Recall"],
    "datasets": [{{
      "label": "Decision Tree Metrics",
      "data": {json.dumps(metrics)},
      "backgroundColor": ["#1f77b4", "#ff7f0e", "#2ca02c"],
      "borderColor": "#ffffff",
      "borderWidth": 1
    }}]
  }},
  "options": {{
    "scales": {{
      "y": {{
        "beginAtZero": true,
        "max": 1,
        "title": {{
          "display": true,
          "text": "Score"
        }}
      }},
      "x": {{
        "title": {{
          "display": true,
          "text": "Metric"
        }}
      }}
    }},
    "plugins": {{
      "legend": {{
        "display": false
      }},
      "title": {{
        "display": true,
        "text": "Iris Decision Tree Performance"
      }}
    }}
  }}
}}
```
""")
``````python
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score
import pandas as pd
import json

# Load and preprocess Iris dataset
iris = load_iris()
X, y = iris.data, iris.target
df = pd.DataFrame(X, columns=iris.feature_names)
df.fillna(df.mean(), inplace=True)
X = df.values

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train decision tree
clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)

# Compute metrics
y_pred = clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='macro')
recall = recall_score(y_test, y_pred, average='macro')

# Data for visualization
metrics = [accuracy, precision, recall]

# Print Chart.js configuration
print("Iris Decision Tree Performance Chart:")
print(f"""
```chartjs
{{
  "type": "bar",
  "data": {{
    "labels": ["Accuracy", "Precision", "Recall"],
    "datasets": [{{
      "label": "Decision Tree Metrics",
      "data": {json.dumps(metrics)},
      "backgroundColor": ["#1f77b4", "#ff7f0e", "#2ca02c"],
      "borderColor": "#ffffff",
      "borderWidth": 1
    }}]
  }},
  "options": {{
    "scales": {{
      "y": {{
        "beginAtZero": true,
        "max": 1,
        "title": {{
          "display": true,
          "text": "Score"
        }}
      }},
      "x": {{
        "title": {{
          "display": true,
          "text": "Metric"
        }}
      }}
    }},
    "plugins": {{
      "legend": {{
        "display": false
      }},
      "title": {{
        "display": true,
        "text": "Iris Decision Tree Performance"
      }}
    }}
  }}
}}
```
""")
```
